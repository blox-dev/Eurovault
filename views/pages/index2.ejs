<!DOCTYPE html>
<html lang="en" class="w-100 h-100">

<head>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Europe vault</title>

    <!-- leaflet -->
    <link rel="stylesheet" href="public/lib/leafletjs/leaflet.css" />
    <script src="public/lib/leafletjs/leaflet.js"></script>

    <!-- danfojs -->
    <script src="public/lib/danfojs/bundle.js"></script>

    <!-- bootstrap -->
    <link rel="stylesheet" href="public/lib/bootstrap/css/bootstrap.min.css" />
    <script src="public/lib/bootstrap/js/bootstrap.min.js"></script>

    <style>
        .info {
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
            border-radius: 5px;
        }

        .info h4 {
            margin: 0 0 5px;
            color: #777;
        }

        .legend {
            line-height: 18px;
            color: #555;
        }

        .legend i {
            width: 18px;
            height: 18px;
            float: left;
            margin-right: 8px;
            opacity: 0.7;
        }

        /* Credit: https://tutorialzine.com/2014/07/css-inline-help-tips */
        /* --------------------------*
     *      Inline help tip      *
     * --------------------------*/

        .tool-tip {
            text-align: center;
            background-color: #237299;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 14px;
            line-height: 26px;
            cursor: default;
        }

        .tool-tip:before {
            content: '?';
            font-weight: bold;
            color: #fff;
        }

        .tooltip-description {
            top: 65px;
            position: absolute;
            display: none;
            z-index: auto;
            background-color: white;
            padding: 10px;
            width: 300px;
            position: absolute;
            border-radius: 3px;
            right: 0px;
            color: black;
            opacity: 0.8;
        }
    </style>
</head>

<body class="h-100 w-100 px-4 py-2" style="background-color:#EFEFEF">
    <div class="row h-100 w-100">
        <div class="col-12 col-xl-6 h-100">
            <div class="row" style="height:8%;">

                <div class="col-12 col-lg-6">
                    <div id="select_file_div">

                        <select id="select_file_dropdown" style="width: 100%; text-overflow: ellipsis;">
                        </select>

                    </div>
                </div>

                <div class="col-12 col-lg-6">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="comparison_toggle"
                            onchange="switch_comparison_mode(this.checked);">
                        <label class="form-check-label" for="comparison_toggle">
                            Comparison mode
                        </label>
                    </div>
                </div>


            </div>
            <div class="row" style="height:92%;">
                <div id="map" class="h-100 w-100">

                </div>
            </div>
        </div>
        <div class="col-12 col-xl-6">
            <div class="row">
                <div id="chart_dropdown">

                </div>
            </div>

            <div class="row" style="height:90%;">
                <div id="bar_chart">
                    <div id="intro_data">
                        <h1>Europe vault</h1>
                        <p>Visualisation tool for students that want to move to Europe.</p>
                        <p>Click on a country to begin exploring the data.</p>
                        <p>Toggle comparison mode for choosing the country that fits you best.</p>
                        <small>Big thanks to <a href="https://ec.europa.eu/eurostat/">Eurostat</a> for providing the
                            best quality <a href="https://ec.europa.eu/eurostat/data/database">european
                                datasets</a>!</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        // HELPERS
        const range = (start, end, step = 1) => {
            let output = [];
            if (typeof end === 'undefined') {
                end = start;
                start = 0;
            }
            for (let i = start; i < end; i += step) {
                output.push(i);
            }
            return output;
        };

        // MAIN

        class EuroMap {

            // MAP DATA
            geoJSON = null;

            // MAP COMPONENTS
            m_map = null;
            info = null;
            legend = null;
            data_comp = null;

            set_data(data) {
                this.data_comp = data;
            }


            constructor(geoJSON) {
                this.geoJSON = geoJSON;

                // MAP STUFF

                //create european map and set its center
                map = L.map("map").setView([56.105, 13.609], 4);

                //map zoom options
                map.options.minZoom = 3;
                map.options.maxZoom = 8;

                //place the map into view
                map.setMaxBounds([
                    //south west
                    [33.312, -11.427],
                    //north east
                    [73.1, 47.725],
                ]);

                // let geoMap = L.geoJson(this.geoJSON, {
                L.geoJson(this.geoJSON, {
                    onEachFeature: this.onEachFeature.bind(this),
                    style: this.style.bind(this),
                }).addTo(map);

                // HOVER BOX
                let info = L.control();

                info.onAdd = function (map) {
                    this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
                    this.update();
                    return this._div;
                };

                // method that we will use to update the control based on feature properties passed
                info.update = function (props) {

                    // this._div.innerHTML = '<h5>' + current_filename.replaceAll('_', ' ') + '</h5>' +

                    //   ((current_selected_country != '' && previous_selected_country == '' && comparing_mode) ? ("<b>Click on another country to compare</b>") : ((props) ? '<b>' + props[0] + '</b><br />' + props[1] : 'Hover over a country'))

                    //   + '<div id="tooltip-description" class="tooltip-description" style="display:none"><p>'
                    //   + all_tables[current_filename].meta.description.replaceAll("\n", "<br>") + '</p></div>';
                };

                info.addTo(map);

                // LEGEND
                let legend = L.control({ position: 'bottomright' });

                legend.onAdd = function (map) {

                    function toRoundOrNotToRound(x) {
                        if (x > 100) {
                            return Math.round(x)
                        }
                        else if (x > 1) {
                            return Math.round(x * 10) / 10
                        }
                        else {
                            return Math.round(x * 100) / 100
                        }
                    };

                    let div = L.DomUtil.create('div', 'info legend'),
                        // grades = range(min_value, max_value, (max_value - min_value) / 8),
                        grades = range(0, 1000, 125);
                    let labels = [];

                    //                     div.innerHTML += 'Data from ' + "displayed_year" + "  " +
                    //                         `<span class="tool-tip" style="display:inline-block" \
                    // onmouseover="document.getElementById('tooltip-description').style.display='block';" \
                    // onmouseleave="document.getElementById('tooltip-description').style.display='none';" \
                    // ></span><br>`;

                    for (let i = 0; i < grades.length; i++) {
                        div.innerHTML +=
                            '<i style="background:' + "gray" /* getColor(grades[i] + 0.0001) */ + '"></i> ' +
                            toRoundOrNotToRound(grades[i]) + (grades[i + 1] ? ' - ' + toRoundOrNotToRound(grades[i + 1]) + '<br>' : '+');
                    }

                    return div;
                };


                //check if this does something
                //   if (clearmap) {
                map.removeControl(legend);
                map.removeControl(info);
                //   }

                info.addTo(map);
                legend.addTo(map);

                this.info = info;
                this.legend = legend;
                this.m_map = map;
            }

            resetHighlight(e) {
                this.m_map.resetStyle(e.target);
                info.update();
            }

            highlightFeature(e) {
                var layer = e.target;
                // let view = all_tables[current_filename].meta.view;

                if (view === 'Positive') {
                    bordercolor = '#4a1486';
                    borderfill = '#4a1486';
                }

                layer.setStyle({
                    //weight: 5,
                    color: borderfill,
                    weight: 4,
                    opacity: 1,
                    color: bordercolor,
                    dashArray: '4',
                    fillOpacity: 0.9
                });

                if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
                    layer.bringToFront();
                }

                info.update([layer.feature.properties.ADMIN, mapValue(layer.feature.properties.ADMIN)]);
            }

            graphData(e) {
                this.data_comp.make_data(e.target.feature.properties.ISO_A3 || e.target.feature.properties.ADMIN);
                // const country = e.target.feature.properties.ADMIN; // ISO_A3

                // if (current_selected_country != "") {
                //     previous_selected_country = current_selected_country;
                // }
                // current_selected_country = country;

                // if (comparing_mode)
                //     info.update();

                // //console.log("ccc" + country);

                // //plot data for {country} in div with id 'bar_chart'
                // //bindBarChart(country, 'bar_chart');
                // if (previous_selected_country != "" & comparing_mode == true) {
                //     bindLineChart(current_selected_country, previous_selected_country, 'bar_chart');
                // } else {
                //     bindBarChart(country, 'bar_chart');
                // }
            }

            onEachFeature(feature, layer) {
                layer.on({
                    mouseover: this.highlightFeature.bind(this),
                    mouseout: this.resetHighlight.bind(this),
                    click: this.graphData.bind(this)
                });
            }

            style(feature) {
                return {
                    fillColor: 'gray', // mapColor(feature.properties.ADMIN),
                    weight: 2,
                    opacity: 1,
                    color: 'red',
                    dashArray: '',
                    fillOpacity: 1
                };
            }

        }

        class Data {
            // DATA
            data_map = {};
            metadata = {};
            europe_map = null;
            geoJSON = {};

            // COMPONENTS
            barchart_div = null;
            file_select = null;

            // VARS
            comparing_mode = false;
            current_country = null;
            last_country = null;

            constructor(europe_map) {
                this.europe_map = europe_map;
                this.geoJSON = this.europe_map.geoJSON;

                // ADD HTML HOOKS
                const comparison_box = document.getElementById("comparison_toggle");
                comparison_box.onchange = (e) => {
                    e.preventDefault();
                    this.toggle_comparison(comparison_box.checked);
                }

                this.barchart = document.getElementById("bar_chart");
                this.file_select = document.getElementById("select_file_dropdown");
            }

            toggle_comparison(checked) {
                this.comparing_mode = checked;
            }

            set_metadata(metadata) {
                this.metadata = metadata;
            }

            add_data(key, value) {
                this.data_map[key] = value;
            }

            make_data(country) {
                this.previous_country = this.current_country;
                this.current_country = country;

                console.log(country);

                //plot data for {country} in div with id 'bar_chart'
                //bindBarChart(country, 'bar_chart');
                if (this.previous_selected_country != null && this.comparing_mode == true) {
                    this.bindLineChart(this.current_selected_country, this.previous_selected_country);
                } else {
                    this.bindBarChart(country);
                }
            }

            bindLineChart(country, country2) {
                //delete current line chart
                this.barchart.textContent = '';

                // if (country == '' || country2 == '') {
                //     return;
                // }

                const file = this.file_select.value;
                const data = this.metadata[file];

                //line chart style
                const layout = {
                    title: {
                        text: "Comparison of " + current_filename.replaceAll("_", " ") + " in " + country + " and " + country2,
                    },
                    legend: {
                        x: 0,
                        y: -0.3,
                        borderwidth: 1,
                        font: { family: "Arial", size: 10, color: "#000" },
                    },
                    width: '800px',
                    // width: '100%',
                    // height: '100%',
                    yaxis: {
                        title: data.meta.y,
                    },
                    xaxis: {
                        title: data.meta.x,
                    },
                };

                //restrict rows to have the country attribute as the selected country
                var rows = data.df["COUNTRY"].eq(country);
                var rows2 = data.df["COUNTRY"].eq(country2);

                //check for multiple attributes
                if (hasVaryingAttributes) {
                    Object.keys(data.meta.values).forEach(key => {
                        const dropdown = document.getElementById(key);

                        //add condition to row selection
                        rows = rows.and(data.df[key].eq(dropdown.value));
                        rows2 = rows2.and(data.df[key].eq(dropdown.value));
                    });
                }

                //select the actual data we're gonna use in the the line chart
                let linechart_data = data.df.loc({
                    columns: ["TIME", "VALUE"],
                    rows: rows,
                });

                let linechart_data2 = data.df.loc({
                    columns: ["TIME", "VALUE"],
                    rows: rows2,
                });

                const max_time = getMax(linechart_data.column("TIME").values);
                console.log(max_time);

                const min_time = getMinNotNull(linechart_data.column("TIME").values);
                console.log(min_time);

                if (max_time != 'undefined' && max_time === min_time) {
                    document.getElementById(targetDivID).innerHTML = "<h3>Not enough data</h3><p>Explore the map instead!</p>";
                    return;
                }

                const nr_rows = linechart_data.count({ axis: 1 }).count();

                //there is data for the selected country
                if (nr_rows != 0) {
                    document.getElementById(targetDivID).innerHTML = "";
                    linechart_data.setIndex({ column: "TIME", inplace: true });

                    //set the target dataframe with the actual country names
                    let dataa = {};
                    dataa[country] = linechart_data["VALUE"].values;
                    dataa[country2] = linechart_data2["VALUE"].values;

                    const df = new dfd.DataFrame(dataa, { index: linechart_data["TIME"].values });

                    df.plot(targetDivID).line({ layout: layout });
                }
                //no data for the selected country
                else {
                    document.getElementById(targetDivID).innerHTML = "<3>No data for " + country + "</h3>";
                }
            }

            bindBarChart(country) {
                //delete current bar chart
                this.barchart.textContent = '';

                // if (country == '') {
                //     return;
                // }

                const file = this.file_select.value;
                const metadata = this.metadata[file];
                const data = this.data_map[file];

                //barchart style
                const layout = {
                    title: {
                        text: current_filename.replaceAll("_", " ") + " in " + country,
                    },
                    width: '800',
                    //width: '100%'
                    //height: '100%',
                    yaxis: {
                        title: data.meta.y,
                    },
                    xaxis: {
                        title: data.meta.x,
                    },
                };

                //restrict rows to have the country attribute as the selected country
                var rows = data.df["COUNTRY"].eq(country);

                if (hasVaryingAttributes) {
                    Object.keys(data.meta.values).forEach(key => {
                        const dropdown = document.getElementById(key);

                        console.log(key + ": " + dropdown.value);

                        //add condition to row selection
                        rows = rows.and(data.df[key].eq(dropdown.value));
                    });
                }

                //select the actual data we're gonna use in the bar_chart
                let barchart_data = data.df.loc({
                    columns: ["TIME", "VALUE"],
                    rows: rows,
                });

                const max_time = getMax(barchart_data.column("TIME").values);
                console.log(max_time);

                const min_time = getMinNotNull(barchart_data.column("TIME").values);
                console.log(min_time);

                if (max_time != 'undefined' && max_time === min_time) {
                    document.getElementById(targetDivID).innerHTML = "<h3>Not enough data</h3><p>Explore the map instead!</p>";
                    return;
                }

                const nr_rows = barchart_data.count({ axis: 1 }).count();

                //there is data for the selected country
                if (nr_rows != 0) {
                    document.getElementById(targetDivID).innerHTML = "";
                    barchart_data.setIndex({ column: "TIME", inplace: true });

                    //barchart_data.print();

                    barchart_data["VALUE"].plot(targetDivID).bar({ layout: layout });
                }
                //no data for the selected country
                else {
                    document.getElementById(targetDivID).innerHTML = "<h3>No data for " + country + " :(</h3>";
                    return;
                }
            }
        }

        //fetch the metadata
        fetch("./public/countries.geojson")
            .then(resp => resp.json())
            .then(geoInfo => {
                let europe_map = new EuroMap(geoInfo);
                let data = new Data(europe_map);
                europe_map.set_data(data);

                // TODO: check if metadataaa.json exists
                fetch("./data/metadataaa.json")
                    .then(response => response.json())
                    .then(metaData => {
                        console.log(metaData);
                        data.set_metadata(metaData);

                        let selectFile = document.getElementById("select_file_dropdown");

                        //when the selected file changes, update the map
                        selectFile.onchange = (e) => { };//updateMap(selectFile.value, true); };

                        let first = true;

                        //iterate through files
                        Object.keys(metaData).forEach(key => {
                            let meta = metaData[key];
                            //console.log(meta);
                            //create option for the file
                            let option = document.createElement('option');
                            option.value = key;
                            option.innerText = meta.label;

                            selectFile.append(option);

                            dfd.readCSV('./dataa/' + key + '.csv').then(df => {
                                data.add_data(key, { df: df, meta: meta });
                            }).then(() => {
                                //update the map with the first file that loads
                                if (first) {
                                    first = false;
                                    // data.update(key);
                                    // updateMap(key, false);
                                }
                            });
                        });
                    });
            });
    </script>
</body>

</html>
